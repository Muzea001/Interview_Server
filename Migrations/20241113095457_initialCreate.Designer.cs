// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Interview_Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241113095457_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Interview_Server.Models.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kongens gate 6",
                            CompanyName = "PayEx",
                            Description = "Technical interview after a short speedinterview",
                            Title = "Technical Interview"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Idrettsveien 8",
                            CompanyName = "Nordre Follo Kommune",
                            Description = "Bli kjent intervju",
                            Title = "Førstegangsintervju"
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.Logbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("UserInterviewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserInterviewId");

                    b.ToTable("Logbooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Overall Good Interview. Need to improve something.",
                            Time = new TimeOnly(14, 30, 0),
                            Title = "Logbook from first interview",
                            UserId = 1,
                            UserInterviewId = 1
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserInterviewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserInterviewId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Need to smile more on interviews",
                            Status = "Reviewed",
                            Title = "Quick note from first interview",
                            UserInterviewId = 1
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LogbookId")
                        .HasColumnType("integer");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ali@example.com",
                            LogbookId = 1,
                            Mobile = "1234",
                            PasswordHash = "AQAAAAIAAYagAAAAEPSc4wNR4girynWl18H6d77IS8t+ATyGgAJlVyKSIlObLMCzWSx+n5AZKgzRrZpzdA==",
                            Username = "Ali Khan"
                        },
                        new
                        {
                            Id = 2,
                            Email = "muaath@example.com",
                            LogbookId = 2,
                            Mobile = "1881",
                            PasswordHash = "AQAAAAIAAYagAAAAEPp9YbwMQYFPyzcKkvrw/CRFNw/fDCod5RdkWwCW12jdoB8qpxN7nmI4azGdqZuQqg==",
                            Username = "Muaath Zerouga"
                        },
                        new
                        {
                            Id = 3,
                            Email = "john@example.com",
                            LogbookId = 3,
                            Mobile = "123",
                            PasswordHash = "AQAAAAIAAYagAAAAECzQ/woUf17bR78lZo0HF7IGuQEyxzU3qz6btPG9GIwHQ1MCNQg7uRWMQaH8VJt6bw==",
                            Username = "John Ferdie"
                        },
                        new
                        {
                            Id = 4,
                            Email = "magnus@example.com",
                            LogbookId = 4,
                            Mobile = "786",
                            PasswordHash = "AQAAAAIAAYagAAAAEAkbEc79745+Jx3blcDpzUNHV/CjSNVc41eKazaW1uBRDK7B1G1x6brxJuWT37G6vw==",
                            Username = "Magnus Brandsegg"
                        });
                });

            modelBuilder.Entity("UserInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("InterviewId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InterviewTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInterviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InterviewId = 1,
                            InterviewTime = new DateTime(2024, 11, 11, 14, 30, 0, 0, DateTimeKind.Utc),
                            Role = "Interviewee",
                            Status = "Scheduled",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.Logbook", b =>
                {
                    b.HasOne("Interview_Server.Models.User", "User")
                        .WithOne("Logbook")
                        .HasForeignKey("Interview_Server.Models.Logbook", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserInterview", "UserInterview")
                        .WithMany()
                        .HasForeignKey("UserInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserInterview");
                });

            modelBuilder.Entity("Interview_Server.Models.Note", b =>
                {
                    b.HasOne("UserInterview", "UserInterview")
                        .WithMany("Notes")
                        .HasForeignKey("UserInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInterview");
                });

            modelBuilder.Entity("UserInterview", b =>
                {
                    b.HasOne("Interview_Server.Models.Interview", "Interview")
                        .WithMany("UserInterviews")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview_Server.Models.User", "User")
                        .WithMany("UserInterviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Interview_Server.Models.Interview", b =>
                {
                    b.Navigation("UserInterviews");
                });

            modelBuilder.Entity("Interview_Server.Models.User", b =>
                {
                    b.Navigation("Logbook")
                        .IsRequired();

                    b.Navigation("UserInterviews");
                });

            modelBuilder.Entity("UserInterview", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
