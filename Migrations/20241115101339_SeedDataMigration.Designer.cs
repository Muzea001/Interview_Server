// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Interview_Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241115101339_SeedDataMigration")]
    partial class SeedDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Interview_Server.Models.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kongens gate 6, Oslo",
                            CompanyName = "PayEx",
                            Description = "Technical interview after a short speedinterview",
                            Title = "Technical Interview"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Idrettsveien 8, Ski",
                            CompanyName = "Nordre Follo Kommune",
                            Description = "Bli kjent intervju",
                            Title = "Førstegangsintervju"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Helsingborgveien 5, Bergen",
                            CompanyName = "TechCorp Solutions",
                            Description = "A technical interview for a software engineer position",
                            Title = "Software Engineer Interview"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Bergen Street 12, Bergen",
                            CompanyName = "GlobalTech Innovations",
                            Description = "Interview for the position of data analyst",
                            Title = "Data Analyst Interview"
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InterviewId")
                        .HasColumnType("integer");

                    b.Property<int>("LogbookId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("LogbookId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Learned about interview preparation and key technical questions",
                            InterviewId = 1,
                            LogbookId = 1,
                            Title = "Log 1"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Studied Python and algorithms for the next interview",
                            InterviewId = 1,
                            LogbookId = 1,
                            Title = "Log 2"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Discovered effective ways to answer behavioral questions",
                            InterviewId = 3,
                            LogbookId = 2,
                            Title = "Log 1"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Reviewed data analysis tools like Excel, Tableau, and Power BI",
                            InterviewId = 3,
                            LogbookId = 2,
                            Title = "Log 2"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Prepared for coding tests and problem-solving strategies",
                            InterviewId = 4,
                            LogbookId = 3,
                            Title = "Log 1"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Analyzed data sets and created data reports",
                            InterviewId = 4,
                            LogbookId = 3,
                            Title = "Log 2"
                        },
                        new
                        {
                            Id = 7,
                            Content = "Learned SQL database optimization techniques",
                            InterviewId = 2,
                            LogbookId = 4,
                            Title = "Log 1"
                        },
                        new
                        {
                            Id = 8,
                            Content = "Focused on advanced SQL queries for interviews",
                            InterviewId = 2,
                            LogbookId = 4,
                            Title = "Log 2"
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.Logbook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Logbooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "Ali's Logbook",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Title = "Muaath's Logbook",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Title = "John's Logbook",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Title = "Magnus's Logbook",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Title = "Sophia's Logbook",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            Title = "David's Logbook",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserInterviewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserInterviewId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Need to smile more on interviews",
                            Status = "Reviewed",
                            Title = "Quick note from first interview",
                            UserInterviewId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Reviewed algorithms and problem-solving questions",
                            Status = "Reviewed",
                            Title = "Technical question review",
                            UserInterviewId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Need to work on STAR method for behavioral questions",
                            Status = "NotReviewed",
                            Title = "Behavioral question notes",
                            UserInterviewId = 3
                        },
                        new
                        {
                            Id = 4,
                            Content = "Worked on cleaning data sets for the upcoming interview",
                            Status = "NotReviewed",
                            Title = "Data analysis feedback",
                            UserInterviewId = 4
                        },
                        new
                        {
                            Id = 5,
                            Content = "Reviewed optimization techniques and SQL queries",
                            Status = "Reviewed",
                            Title = "SQL skills review",
                            UserInterviewId = 4
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LogbookId")
                        .HasColumnType("integer");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ali@example.com",
                            LogbookId = 1,
                            Mobile = "1234",
                            PasswordHash = "AQAAAAIAAYagAAAAEADDptPPPl5spwN2AG6tb6pbFYAnl7FMzZomXkGN7/GSnPzVcJEcudxHu+JlrVZWyw==",
                            Username = "Ali Khan"
                        },
                        new
                        {
                            Id = 2,
                            Email = "muaath@example.com",
                            LogbookId = 2,
                            Mobile = "1881",
                            PasswordHash = "AQAAAAIAAYagAAAAEOzNW8gNOnm98KwZ3X3b23aNBt4onAJQSoFFT/8F1d6RFNXUqej8KdTvnW4XKJ2Bpg==",
                            Username = "Muaath Zerouga"
                        },
                        new
                        {
                            Id = 3,
                            Email = "john@example.com",
                            LogbookId = 3,
                            Mobile = "123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDT6NNeVR5GNt8Xv+LDnUU30Wo2eNyZlm1egfjsBNefmt4HeLU4UymMuddAjTe5LoQ==",
                            Username = "John Ferdie"
                        },
                        new
                        {
                            Id = 4,
                            Email = "magnus@example.com",
                            LogbookId = 4,
                            Mobile = "786",
                            PasswordHash = "AQAAAAIAAYagAAAAEBarQP3sSpdCAgyxjqhrsj2ilkfk89TzINMx26o+NvNRt4k7NDbfuAecDHWQCv37+w==",
                            Username = "Magnus Brandsegg"
                        },
                        new
                        {
                            Id = 5,
                            Email = "sophia@example.com",
                            LogbookId = 5,
                            Mobile = "2250",
                            PasswordHash = "AQAAAAIAAYagAAAAEKqXvqsoUxjq9YIwjlBN+XFEbcA0KWEGgGLQ6wjRIk6uUNzOikrpQdanX/dEB0nieA==",
                            Username = "Sophia Miller"
                        },
                        new
                        {
                            Id = 6,
                            Email = "david@example.com",
                            LogbookId = 6,
                            Mobile = "4332",
                            PasswordHash = "AQAAAAIAAYagAAAAEIpSBo40iZU34C0+emVshGPRubQnv+yM86fhASnKNJDTmasrDA2Wm1X22Uj1FRq0SA==",
                            Username = "David Johnson"
                        });
                });

            modelBuilder.Entity("UserInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("InterviewId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InterviewTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InterviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInterviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationInMinutes = 120,
                            InterviewId = 1,
                            InterviewTime = new DateTime(2024, 11, 11, 14, 30, 0, 0, DateTimeKind.Utc),
                            Role = "Interviewee",
                            Status = "Scheduled",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DurationInMinutes = 90,
                            InterviewId = 3,
                            InterviewTime = new DateTime(2024, 11, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Role = "Interviewee",
                            Status = "Scheduled",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            DurationInMinutes = 60,
                            InterviewId = 4,
                            InterviewTime = new DateTime(2024, 11, 16, 11, 15, 0, 0, DateTimeKind.Utc),
                            Role = "Interviewee",
                            Status = "Scheduled",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            DurationInMinutes = 45,
                            InterviewId = 2,
                            InterviewTime = new DateTime(2024, 11, 18, 15, 45, 0, 0, DateTimeKind.Utc),
                            Role = "Interviewee",
                            Status = "Scheduled",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Interview_Server.Models.Log", b =>
                {
                    b.HasOne("Interview_Server.Models.Interview", "Interview")
                        .WithMany()
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview_Server.Models.Logbook", "Logbook")
                        .WithMany("Logs")
                        .HasForeignKey("LogbookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("Logbook");
                });

            modelBuilder.Entity("Interview_Server.Models.Logbook", b =>
                {
                    b.HasOne("Interview_Server.Models.User", "User")
                        .WithOne("Logbook")
                        .HasForeignKey("Interview_Server.Models.Logbook", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Interview_Server.Models.Note", b =>
                {
                    b.HasOne("UserInterview", "UserInterview")
                        .WithMany("Notes")
                        .HasForeignKey("UserInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInterview");
                });

            modelBuilder.Entity("UserInterview", b =>
                {
                    b.HasOne("Interview_Server.Models.Interview", "Interview")
                        .WithMany("UserInterviews")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interview_Server.Models.User", "User")
                        .WithMany("UserInterviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Interview_Server.Models.Interview", b =>
                {
                    b.Navigation("UserInterviews");
                });

            modelBuilder.Entity("Interview_Server.Models.Logbook", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Interview_Server.Models.User", b =>
                {
                    b.Navigation("Logbook")
                        .IsRequired();

                    b.Navigation("UserInterviews");
                });

            modelBuilder.Entity("UserInterview", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
